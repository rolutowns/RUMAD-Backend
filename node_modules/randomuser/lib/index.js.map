{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";AAAA,mCAAmC;AACnC,6BAAsC;AAGtC,MAAM,QAAQ,GAAW,4BAA4B,CAAC;AAYtD,MAAM,UAAU;IAEZ;QACI,IAAI,CAAC,CAAC,IAAI,YAAY,UAAU,CAAC,EAAE;YAC/B,OAAO,IAAI,UAAU,EAAE,CAAC;SAC3B;IACL,CAAC;IAEM,QAAQ,CAAC,MAAmD,EAAE,QAAmC;QACpG,IAAI,GAAG,GAAW,QAAQ,GAAG,GAAG,CAAC;QAEjC,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAC9B,QAAQ,GAAG,MAAM,CAAC;YAClB,MAAM,GAAG,SAAS,CAAC;SACtB;QAED,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;SACxD;aAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YACnC,MAAM,WAAW,GAAG,IAAI,qBAAe,CAAC,MAAM,CAAC,CAAC;YAChD,GAAG,IAAI,WAAW,CAAC,QAAQ,EAAE,CAAC;SACjC;QAED,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,KAAa,EAAE,QAA0B,EAAE,IAAY,EAAQ,EAAE;YAC/E,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;gBACvC,QAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC;aACvC;iBAAM,IAAI,KAAK,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;aAC1B;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAGD,iBAAS,UAAU,CAAC","sourcesContent":["import * as request from 'request';\nimport { URLSearchParams } from 'url';\nimport { Result } from './types';\n\nconst BASE_URL: string = 'https://randomuser.me/api/';\n\ninterface _IRandomUser {\n    /**\n     * Retrieves randomly generated users from API with optional parameters.\n     *\n     * @param {Object}    params    Optional parameters for user generation API request\n     * @param {Function}  callback    Callback function that will be called when the processing is done.\n     */\n    getUsers(params?: Record<string, string | readonly string[]>, callback?: (body: Result[]) => void): RandomUser;\n}\n\nclass RandomUser implements _IRandomUser {\n\n    constructor() {\n        if (!(this instanceof RandomUser)) {\n            return new RandomUser();\n        }\n    }\n\n    public getUsers(params?: Record<string, string | readonly string[]>, callback?: (body: Result[]) => void): RandomUser {\n        let url: string = BASE_URL + '?';\n\n        if (typeof params === 'function') {\n            callback = params;\n            params = undefined;\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('ERROR: Invalid callback function.');\n        } else if (typeof params === 'object') {\n            const queryParams = new URLSearchParams(params);\n            url += queryParams.toString();\n        }\n\n        request.get(url, (error: string, response: request.Response, body: string): void => {\n            if (!error && response.statusCode === 200) {\n                callback!(JSON.parse(body).results);\n            } else if (error) {\n                throw new Error(error);\n            }\n        });\n\n        return this;\n    }\n}\n\n// tslint:disable-next-line:export-name\nexport = RandomUser;\n"]}